import React, { useState, useEffect, useRef, useCallback, useContext } from 'react';
import type { NodeData } from '../store/useBoardStore';
import { useBoardStore, defaultContent, LIGHT_CARD_COLORS, DARK_CARD_COLORS } from '../store/useBoardStore';
import RichTextEditor from './RichTextEditor';
import CardColorPicker from './CardColorPicker';
import DeleteConfirmModal from './DeleteConfirmModal';
import AICodeGenerator from './AICodeGenerator';
import type { Descendant } from 'slate';
import CodePreview from './CodePreview';
import CodeRenderer from './CodeRenderer';
import { detectCodeLanguage } from '../utils/codeDetector';
import { Transforms, Editor } from 'slate';
import { ReactEditor } from 'slate-react';
import { ThemeContext } from '../App';

// 简单的错误边界组件
class ErrorBoundary extends React.Component<{children: React.ReactNode, fallback: React.ReactNode}> {
  state = { hasError: false };
  
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  
  componentDidCatch(error: Error) {
    console.error("编辑器错误:", error);
  }
  
  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
}

interface Props {
  node: NodeData;
}

// 提取文本内容的辅助函数
const getTextContent = (descendants: any[]): string => {
  if (!descendants || !Array.isArray(descendants)) return '';
  
  return descendants.map(desc => {
    if (desc.children && Array.isArray(desc.children)) {
      return getTextContent(desc.children);
    }
    return desc.text || '';
  }).join('');
};

// 检查是否应移除内边距的工具函数
const shouldRemovePadding = (content: Descendant[]): boolean => {
  // 如果只有一个元素且是全尺寸图片，不需要内边距
  if (content.length === 1) {
    const item = content[0] as any;
    return item.type === 'image' && item.isFullSize === true;
  }
  return false;
};

const NodeCard: React.FC<Props> = ({ node }) => {
  const updateNode = useBoardStore((s) => s.updateNode);
  const setNodeEditing = useBoardStore((s) => s.setNodeEditing);
  const selectNode = useBoardStore((s) => s.selectNode);
  const deleteNode = useBoardStore((s) => s.deleteNode);
  const scale = useBoardStore((s) => s.scale);
  const panX = useBoardStore((s) => s.panX);
  const panY = useBoardStore((s) => s.panY);
  
  // 添加卡片翻转相关状态和方法
  const flipCard = useBoardStore((s) => s.flipCard);
  
  // 添加连线相关的状态和方法
  const isConnecting = useBoardStore((s) => s.isConnecting);
  const connectingFrom = useBoardStore((s) => s.connectingFrom);
  const startConnecting = useBoardStore((s) => s.startConnecting);
  const finishConnecting = useBoardStore((s) => s.finishConnecting);
  const addConnection = useBoardStore((s) => s.addConnection);
  const updateTempConnection = useBoardStore((s) => s.updateTempConnection);
  
  // 添加CSS动画样式
  React.useEffect(() => {
    if (!document.getElementById('nodecard-animations')) {
      const style = document.createElement('style');
      style.id = 'nodecard-animations';
      style.textContent = `
        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateX(10px) scale(0.8);
          }
          to {
            opacity: 1;
            transform: translateX(0) scale(1);
          }
        }
        
        /* 添加卡片翻转动画 */
        .flip-card {
          perspective: 1000px;
          box-sizing: border-box;
          /* 确保边框位置清晰 */
          border: 1px solid transparent;
        }
        
        .flip-card-inner {
          position: relative;
          width: 100%;
          height: 100%;
          transition: transform 0.6s;
          transform-style: preserve-3d;
          box-sizing: border-box;
        }
        
        .flip-card.flipped .flip-card-inner {
          transform: rotateY(180deg);
        }
        
        .flip-card-front, .flip-card-back {
          position: absolute;
          width: 100%;
          height: 100%;
          -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
          overflow: hidden;
          box-sizing: border-box;
        }
        
        .flip-card-back {
          transform: rotateY(180deg);
        }

        /* 锚点悬停动画 */
        .card-anchor {
          transition: transform 0.2s ease, background-color 0.2s ease, width 0.2s ease, height 0.2s ease; 
        }
        
        .card-anchor:hover {
          transform: scale(1.2);
        }

        /* 添加最大高度和滚动条样式 */
        .card-content-container {
          max-height: 550px;
          overflow-y: hidden; /* 默认隐藏溢出 */
          overflow-x: hidden;
          box-sizing: border-box;
          width: 100%;
          height: 100%;
          scrollbar-width: none; /* 默认隐藏Firefox滚动条 */
        }

        /* 当内容超出时才启用滚动 */
        .card-content-container.content-scrollable {
          overflow-y: auto; /* 内容超出时启用滚动 */
        }
        
        /* 当内容可滚动并且卡片被选中或悬停时显示Firefox滚动条 */
        .card-content-container.content-scrollable:hover,
        .card-content-container.content-scrollable:focus,
        .flip-card.selected .card-content-container.content-scrollable {
          scrollbar-width: thin; /* Firefox */
          scrollbar-color: rgba(0, 0, 0, 0.15) transparent; /* Firefox */
        }

        /* 编辑器容器样式 */
        .editor-container {
          max-height: 550px;
          overflow-y: auto;
          overflow-x: hidden;
          box-sizing: border-box;
          width: 100%;
          min-height: 100%;
          display: flex;
          flex-direction: column;
          scrollbar-width: none; /* 默认隐藏Firefox滚动条 */
        }
        
        /* 编辑状态下显示滚动条 */
        .flip-card-front:has(.editor-container:focus-within) .editor-container,
        .flip-card-back:has(.editor-container:focus-within) .editor-container,
        .editor-container:hover {
          scrollbar-width: thin; /* Firefox */
          scrollbar-color: rgba(0, 0, 0, 0.15) transparent; /* Firefox */
        }

        /* 确保编辑器容器至少有足够的高度 */
        .editor-container .slate-editor {
          min-height: 100%;
        }

        /* 默认隐藏所有滚动条 */
        .card-content-container::-webkit-scrollbar,
        .editor-container::-webkit-scrollbar {
          width: 4px; /* 滚动条更细 */
          display: none; /* 默认隐藏滚动条 */
        }

        /* 只有可滚动的内容在卡片被选中或悬停时才显示滚动条 */
        .content-scrollable:hover::-webkit-scrollbar,
        .flip-card.selected .content-scrollable::-webkit-scrollbar,
        .editor-container:hover::-webkit-scrollbar,
        .editor-container:focus-within::-webkit-scrollbar {
          display: block; /* 显示滚动条 */
        }

        .card-content-container::-webkit-scrollbar-track,
        .editor-container::-webkit-scrollbar-track {
          background: transparent;
          margin: 4px 0; /* 上下留出空间 */
        }

        .card-content-container::-webkit-scrollbar-thumb,
        .editor-container::-webkit-scrollbar-thumb {
          background: rgba(0, 0, 0, 0.15); /* 更淡的颜色 */
          border-radius: 4px; /* 圆角更大 */
        }

        .card-content-container::-webkit-scrollbar-thumb:hover,
        .editor-container::-webkit-scrollbar-thumb:hover {
          background: rgba(0, 0, 0, 0.25); /* 悬停时稍微深一点 */
        }
      `;
      document.head.appendChild(style);
    }
  }, []);
  
  const [dragging, setDragging] = useState(false);
  const [resizing, setResizing] = useState(false);
  const [showColorPicker, setShowColorPicker] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showActionMenu, setShowActionMenu] = useState(false);
  const [showAIGenerator, setShowAIGenerator] = useState(false);
  const [aiGeneratorPosition, setAIGeneratorPosition] = useState({ x: 0, y: 0 });
  const [colorPickerPosition, setColorPickerPosition] = useState({ x: 0, y: 0 });
  
  // 新增本地内容状态
  const [localContent, setLocalContent] = useState<Descendant[]>(() => {
    if (node.isFlipped) {
      return (node.backContent && Array.isArray(node.backContent) && node.backContent.length > 0)
        ? node.backContent : defaultContent;
    } else {
      return (node.frontContent && Array.isArray(node.frontContent) && node.frontContent.length > 0)
        ? node.frontContent : (node.content && Array.isArray(node.content) && node.content.length > 0)
          ? node.content : defaultContent;
    }
  });
  
  // 只有外部 node 内容变化时才同步 localContent
  useEffect(() => {
    const external = node.isFlipped
      ? (node.backContent && Array.isArray(node.backContent) && node.backContent.length > 0)
        ? node.backContent : defaultContent
      : (node.frontContent && Array.isArray(node.frontContent) && node.frontContent.length > 0)
        ? node.frontContent : (node.content && Array.isArray(node.content) && node.content.length > 0)
          ? node.content : defaultContent;
    if (JSON.stringify(external) !== JSON.stringify(localContent)) {
      setLocalContent(external);
    }
  }, [node.frontContent, node.backContent, node.content, node.isFlipped]);
  
  // 使用ref保存最新的编辑器内容
  const currentContentRef = useRef<Descendant[]>(localContent);
  // 使用ref来跟踪卡片元素，用于获取实时高度
  const cardRef = useRef<HTMLDivElement>(null);
  // 添加Slate编辑器的ref
  const slateEditorRef = useRef<ReactEditor | null>(null);
  
  // 更新ref中的内容
  useEffect(() => {
    currentContentRef.current = localContent;
  }, [localContent]);

  // 监听编辑状态变化，确保内容不丢失
  const [prevEditing, setPrevEditing] = useState(node.editing);
  
  // 代码检测状态
  // const [isCodeMode, setIsCodeMode] = useState(false);
  // const [codeContent, setCodeContent] = useState('');
  // const [codeLanguage, setCodeLanguage] = useState('javascript');
  
  useEffect(() => {
    // 检测从编辑状态变为非编辑状态
    if (prevEditing && !node.editing) {
      // 立即保存当前编辑器内容
      const contentToSave = currentContentRef.current;
      if (contentToSave && Array.isArray(contentToSave) && contentToSave.length > 0) {
        // 检查是否有图片且为isFullSize模式
        const hasFullSizeImage = contentToSave.some((item: any) => 
          item.type === 'image' && item.isFullSize === true
        );
        
        // 检查是否有文本内容
        const hasTextContent = contentToSave.some((item: any) => {
          if (item.type === 'paragraph' && item.children && Array.isArray(item.children)) {
            return item.children.some((child: any) => child.text && child.text.trim() !== '');
          }
          return false;
        });
        
        // 针对仅有全尺寸图片的情况特殊处理
        if (hasFullSizeImage && !hasTextContent && contentToSave.length === 1) {
          // 确保卡片无内边距
          if (node.isFlipped) {
            console.log('保存卡片背面内容（全尺寸图片）', contentToSave);
            updateNode(node.id, { 
              backContent: contentToSave,
              // 确保内容也同时更新到全局content中，避免正面内容丢失
              content: node.frontContent || contentToSave
            });
          } else {
            updateNode(node.id, { 
              frontContent: contentToSave,
              content: contentToSave
            });
          }
        } else {
          // 常规情况处理
          const hasContent = contentToSave.some((item: any) => 
            item.children && Array.isArray(item.children) && 
            item.children.some((child: any) => child.text && child.text.trim() !== '')
          );
          
          if (hasContent || JSON.stringify(contentToSave) !== JSON.stringify(defaultContent)) {
            // 根据当前卡片面更新相应的内容
            if (node.isFlipped) {
              console.log('保存卡片背面内容', contentToSave);
              // 同时更新backContent和全局content，确保内容不丢失
              updateNode(node.id, { 
                backContent: contentToSave,
                // 确保内容也同时更新到全局content中，避免正面内容丢失 
                content: node.frontContent || contentToSave
              });
            } else {
              updateNode(node.id, { 
                frontContent: contentToSave,
                content: contentToSave // 同时更新content以保持向后兼容
              });
            }
          }
        }
      }
    }
    
    // 进入编辑状态时确保isCodeMode为false
    // if (!prevEditing && node.editing) {
    //   setIsCodeMode(false);
    // }
    
    setPrevEditing(node.editing);
  }, [node.editing, prevEditing, updateNode, node.id, node.isFlipped, node.frontContent]);

  // 全局点击监听，当点击卡片外部时退出编辑状态和关闭菜单
  useEffect(() => {
    if (!node.editing && !showActionMenu) return;

    const handleGlobalClick = (e: MouseEvent) => {
      // 如果点击的是当前卡片内部，不做任何处理
      const cardElement = e.target as Element;
      let isClickInside = false;
      
      // 检查点击是否在当前卡片内
      let current = cardElement;
      while (current && current !== document.body) {
        if (current.closest && current.closest(`[data-node-id="${node.id}"]`)) {
          isClickInside = true;
          break;
        }
        current = current.parentElement as Element;
      }
      
      // 如果点击在卡片外部
      if (!isClickInside) {
        // 关闭动作菜单
        if (showActionMenu) {
          setShowActionMenu(false);
        }
        
        // 如果在编辑状态，退出编辑
        if (node.editing) {
          // 保存当前编辑内容和调整高度
          const validContent = (currentContentRef.current && Array.isArray(currentContentRef.current) && currentContentRef.current.length > 0) ? 
            currentContentRef.current : 
            defaultContent;
          
          // 在退出编辑前，检查内容是否需要更大的高度
          if (cardRef.current) {
            const contentHeight = getContentHeight();
            const currentHeight = node.height || 80;
            
            // 如果内容高度大于当前高度，则扩展卡片高度
            // 但同时确保不超过最大高度限制
            const newHeight = Math.min(550, Math.max(currentHeight, contentHeight));
            
            // 根据当前是否为翻转状态，保存对应内容
            if (node.isFlipped) {
              console.log('点击外部保存背面内容', validContent);
              // 同时保存内容和高度
              updateNode(node.id, { 
                backContent: validContent,
                // 确保内容也同时更新到全局content中，避免正面内容丢失
                content: node.frontContent || validContent,
                ...((!!node.userResized) ? {} : { height: newHeight })
              });
            } else {
              // 同时保存内容和高度
              updateNode(node.id, { 
                frontContent: validContent,
                content: validContent,
                ...((!!node.userResized) ? {} : { height: newHeight })
              });
            }
          } else {
            // 如果没有cardRef，至少保存内容
            if (node.isFlipped) {
              console.log('点击外部保存背面内容（无高度调整）', validContent);
              updateNode(node.id, { 
                backContent: validContent,
                // 确保内容也同时更新到全局content中，避免正面内容丢失
                content: node.frontContent || validContent
              });
            } else {
              updateNode(node.id, { 
                frontContent: validContent,
                content: validContent
              });
            }
          }
          
          // 延迟一帧再退出编辑状态，确保内容和高度已经保存
          setTimeout(() => {
            setNodeEditing(node.id, false);
          }, 0);
        }
      }
    };

    // 添加全局点击监听
    document.addEventListener('mousedown', handleGlobalClick, true);
    
    return () => {
      document.removeEventListener('mousedown', handleGlobalClick, true);
    };
  }, [node.editing, showActionMenu, node.id, setNodeEditing, node.isFlipped, node.frontContent, node.height, updateNode]);

  const { isDarkMode } = useContext(ThemeContext);
  const colorList = isDarkMode ? DARK_CARD_COLORS : LIGHT_CARD_COLORS;
  // 获取当前背景色配置
  const getCurrentCardBackground = () => {
    let colorId = isDarkMode ? node.darkBackgroundColor : node.lightBackgroundColor;
    // 兼容老数据
    if (!colorId) colorId = node.backgroundColor;
    // 没有则用第0个
    const idx = colorList.findIndex(c => c.id === colorId);
    return colorList[idx >= 0 ? idx : 0];
  };
  const currentBg = getCurrentCardBackground();

  // 右键菜单处理
  const handleContextMenu = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (node.editing) return;

    // 设置颜色选择器位置
    setColorPickerPosition({ x: e.clientX, y: e.clientY });
    setShowColorPicker(true);
  };

  // 颜色变化处理
  const handleColorChange = (colorId: string) => {
    if (isDarkMode) {
      updateNode(node.id, { darkBackgroundColor: colorId });
    } else {
      updateNode(node.id, { lightBackgroundColor: colorId });
    }
  };

  const handleConfirmDelete = () => {
    deleteNode(node.id);
    setShowDeleteModal(false);
  };

  // 点击处理 - 确保单击能选中
  const handleClick = (e: React.MouseEvent) => {
    if (node.editing || showColorPicker || showDeleteModal) return;
    
    e.stopPropagation(); // 阻止事件冒泡到BoardCanvas
    
    // 如果当前在连线模式，处理连线逻辑
    if (isConnecting) {
      if (connectingFrom === node.id) {
        // 点击了同一个节点，取消连线
        finishConnecting();
        return;
      } else if (connectingFrom) {
        // 完成连线到目标节点
        addConnection(connectingFrom, node.id);
        finishConnecting();
        return;
      }
    }
    
    // 检查是否有其他正在编辑的节点，如果有则先保存并退出编辑状态
    const allNodes = useBoardStore.getState().nodes;
    const editingNode = allNodes.find(n => n.editing && n.id !== node.id);
    if (editingNode) {
      const { setNodeEditing } = useBoardStore.getState();
      setNodeEditing(editingNode.id, false);
    }
    
    // 处理选中状态
    const isMultiSelect = e.metaKey || e.ctrlKey;
    selectNode(node.id, isMultiSelect);
  };

  // 连线按钮点击处理 - 暂时未使用
  /*
  const handleConnectClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    
    // 如果当前正在编辑，先保存编辑内容
    if (node.editing) {
      const validContent = (currentContentRef.current && Array.isArray(currentContentRef.current) && currentContentRef.current.length > 0) ? currentContentRef.current : defaultContent;
      updateNode(node.id, { frontContent: validContent, backContent: validContent });
      setNodeEditing(node.id, false);
    }
    
    // 开始连线
    startConnecting(node.id);
    setShowActionMenu(false);
  };
  */

  // 锚点拖拽开始
  const handleAnchorMouseDown = (e: React.MouseEvent, position: 'top' | 'right' | 'bottom' | 'left') => {
    e.stopPropagation();
    e.preventDefault();
    
    // 如果当前正在编辑，先保存编辑内容
    if (node.editing) {
      const validContent = (currentContentRef.current && Array.isArray(currentContentRef.current) && currentContentRef.current.length > 0) ? currentContentRef.current : defaultContent;
      updateNode(node.id, { frontContent: validContent, backContent: validContent });
      setNodeEditing(node.id, false);
    }
    
    // 检测目标锚点位置的辅助函数
    const detectTargetAnchor = (clientX: number, clientY: number, targetElement: HTMLElement): 'top' | 'right' | 'bottom' | 'left' => {
      const flipCardElement = targetElement.closest('.flip-card') as HTMLElement;
      const rect = flipCardElement ? flipCardElement.getBoundingClientRect() : targetElement.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      // 计算鼠标位置相对于卡片中心的偏移
      const offsetX = clientX - centerX;
      const offsetY = clientY - centerY;
      
      // 根据偏移量确定最近的锚点
      if (Math.abs(offsetX) > Math.abs(offsetY)) {
        return offsetX > 0 ? 'right' : 'left';
      } else {
        return offsetY > 0 ? 'bottom' : 'top';
      }
    };
    
    // 计算锚点的精确屏幕坐标
    const getAnchorScreenPosition = (position: string) => {
      const flipCardElement = cardRef.current;
      if (!flipCardElement) return { x: e.clientX, y: e.clientY };
      
      const rect = flipCardElement.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      switch (position) {
        case 'top':
          return { x: centerX, y: rect.top };
        case 'right':
          return { x: rect.right, y: centerY };
        case 'bottom':
          return { x: centerX, y: rect.bottom };
        case 'left':
          return { x: rect.left, y: centerY };
        default:
          return { x: centerX, y: centerY };
      }
    };
    
    // 开始连线，并设置初始位置为锚点位置
    startConnecting(node.id, position);
    const anchorPos = getAnchorScreenPosition(position);
    updateTempConnection(anchorPos.x, anchorPos.y);
    
    // 立即开始跟踪鼠标移动
    const onMouseMove = (e: MouseEvent) => {
      updateTempConnection(e.clientX, e.clientY);
    };
    
    const onMouseUp = (e: MouseEvent) => {
      // 检查是否松开鼠标在另一个卡片上
      const element = document.elementFromPoint(e.clientX, e.clientY);
      const targetCard = element?.closest('[data-node-id]');
      
      if (targetCard) {
        const targetNodeId = targetCard.getAttribute('data-node-id');
        
        if (targetNodeId && targetNodeId !== node.id) {
          // 检测目标锚点位置
          const targetAnchor = detectTargetAnchor(e.clientX, e.clientY, targetCard as HTMLElement);
          // 使用 finishConnecting 并传递目标节点ID和锚点位置
          finishConnecting(targetNodeId, targetAnchor);
        } else {
          // 如果目标是同一张卡片，直接取消连线
          finishConnecting();
        }
      } else {
        // 没有目标卡片时取消连线
        finishConnecting();
      }
      
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    };
    
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  };

  // 拖拽逻辑
  const onMouseDown = (e: React.MouseEvent) => {
    if (node.editing || showColorPicker || showDeleteModal) return;
    
    e.stopPropagation();
    e.preventDefault();
    
    const startX = e.clientX;
    const startY = e.clientY;
    let hasDragged = false;
    let lastX = startX;
    let lastY = startY;
    
    const onMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - lastX;
      const deltaY = e.clientY - lastY;
      
      // 如果移动距离超过阈值，开始拖拽
      if (!hasDragged && (Math.abs(e.clientX - startX) > 5 || Math.abs(e.clientY - startY) > 5)) {
        hasDragged = true;
    setDragging(true);
        
        // 开始拖拽时，检查是否有其他正在编辑的节点
        const allNodes = useBoardStore.getState().nodes;
        const editingNode = allNodes.find(n => n.editing && n.id !== node.id);
        if (editingNode) {
          const { setNodeEditing } = useBoardStore.getState();
          setNodeEditing(editingNode.id, false);
        }
        
        // 如果当前卡片未选中，或者是多选模式，处理选中状态
        const isMultiSelect = e.metaKey || e.ctrlKey;
        if (!node.selected || isMultiSelect) {
          selectNode(node.id, isMultiSelect);
        }
      }
      
      if (!hasDragged) return;
      
      // 获取当前状态
      const currentNodes = useBoardStore.getState().nodes;
      const currentSelectedNodes = useBoardStore.getState().selectedNodes;
      
      // 移动所有选中的节点（使用增量移动）
      currentSelectedNodes.forEach(nodeId => {
        const targetNode = currentNodes.find(n => n.id === nodeId);
        if (!targetNode) return;
        
        if (targetNode.pinned) {
          // 固定卡片直接使用屏幕坐标移动
          const currentPinnedX = targetNode.pinnedX || 100;
          const currentPinnedY = targetNode.pinnedY || 100;
          updateNode(nodeId, {
            pinnedX: currentPinnedX + deltaX,
            pinnedY: currentPinnedY + deltaY,
          });
        } else {
          // 普通卡片需要考虑缩放因子
          const currentX = targetNode.x;
          const currentY = targetNode.y;
          updateNode(nodeId, {
            x: currentX + deltaX / scale,
            y: currentY + deltaY / scale,
          });
        }
      });
      
      // 更新上次的鼠标位置
      lastX = e.clientX;
      lastY = e.clientY;
    };

    const onMouseUp = (e: MouseEvent) => {
      // 如果没有拖拽，触发点击选中逻辑
      if (!hasDragged) {
        // 检查是否有其他正在编辑的节点
        const allNodes = useBoardStore.getState().nodes;
        const editingNode = allNodes.find(n => n.editing && n.id !== node.id);
        if (editingNode) {
          const { setNodeEditing } = useBoardStore.getState();
          setNodeEditing(editingNode.id, false);
        }
        
        // 处理选中状态
        const isMultiSelect = (e as any).metaKey || (e as any).ctrlKey;
        selectNode(node.id, isMultiSelect);
      }
      
      setDragging(false);
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    };

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  };

  // 编辑态切换时同步内容
  useEffect(() => {
    // 同步编辑器内容 - 只在进入编辑模式时更新，避免编辑过程中被重置
    if (node.editing) {
      console.log('进入编辑模式，加载内容', node.isFlipped ? '背面' : '正面');
      // 根据当前是正面还是背面，加载对应的内容
      if (node.isFlipped) {
        // 确保加载背面内容
        const backContentToLoad = (node.backContent && Array.isArray(node.backContent) && node.backContent.length > 0)
          ? node.backContent
          : defaultContent;
        
        // 更新到ref和state
        currentContentRef.current = backContentToLoad;
        console.log('更新背面编辑器内容', backContentToLoad);
      } else {
        // 加载正面内容
        const frontContentToLoad = (node.frontContent && Array.isArray(node.frontContent) && node.frontContent.length > 0)
          ? node.frontContent
          : (node.content && Array.isArray(node.content) && node.content.length > 0)
            ? node.content
            : defaultContent;
        
        // 更新到ref和state
        currentContentRef.current = frontContentToLoad;
        console.log('更新正面编辑器内容', frontContentToLoad);
      }
    }
  }, [node.editing, node.isFlipped, node.frontContent, node.backContent, node.content]); // 添加isFlipped依赖，确保翻转时能够更新内容

  // 双击进入编辑态
  const [pendingFocusPos, setPendingFocusPos] = useState<{x: number, y: number} | null>(null);
  const handleDoubleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowColorPicker(false);
    setShowDeleteModal(false);
    // 检查是否有其他正在编辑的节点，如果有则先保存并退出编辑状态
    const allNodes = useBoardStore.getState().nodes;
    const editingNode = allNodes.find(n => n.editing && n.id !== node.id);
    if (editingNode) {
      const { setNodeEditing } = useBoardStore.getState();
      setNodeEditing(editingNode.id, false);
    }
    // 记录鼠标坐标
    setPendingFocusPos({ x: e.clientX, y: e.clientY });
    setNodeEditing(node.id, true);
  };

  // 保存内容并退出编辑态
  const finishEdit = () => {
    const validContent = (currentContentRef.current && Array.isArray(currentContentRef.current) && currentContentRef.current.length > 0) ? currentContentRef.current : defaultContent;
    if (cardRef.current) {
      const contentHeight = getContentHeight();
      const currentHeight = node.height || 80;
      const newHeight = Math.min(550, Math.max(currentHeight, contentHeight));
      if (node.isFlipped) {
        updateNode(node.id, { backContent: validContent, ...((!!node.userResized) ? {} : { height: newHeight }) });
      } else {
        updateNode(node.id, { frontContent: validContent, content: validContent, ...((!!node.userResized) ? {} : { height: newHeight }) });
      }
    } else {
      if (node.isFlipped) {
        updateNode(node.id, { backContent: validContent });
      } else {
        updateNode(node.id, { frontContent: validContent, content: validContent });
      }
    }
    setNodeEditing(node.id, false);
  };

  // 处理编辑器内容变化
  const handleEditorChange = (value: Descendant[]) => {
    currentContentRef.current = value;
    
    // 检测并处理标签输入
    const textContent = getTextContent(value);
    const tagMatches = textContent.match(/#([^\s#]+)/g);
    
    if (tagMatches) {
      // 添加标签
      tagMatches.forEach(match => {
        const tagName = match.slice(1).trim(); // 移除 # 号
        if (tagName) {
          addTag(tagName);
        }
      });
      
      // 清除标签文本，创建新的内容
      const cleanedContent = value.map(block => {
        if ((block as any).type === 'paragraph' && (block as any).children) {
          const cleanedChildren = (block as any).children.map((child: any) => {
            if (child.text) {
              return {
                ...child,
                text: child.text.replace(/#[^\s#]+/g, '').trim()
              };
            }
            return child;
          });
          
          return {
            ...block,
            children: cleanedChildren
          };
        }
        return block;
      }).filter(block => {
        // 过滤掉空的段落
        if ((block as any).type === 'paragraph' && (block as any).children) {
          const hasContent = (block as any).children.some((child: any) => 
            child.text && child.text.trim() !== ''
          );
          return hasContent;
        }
        return true;
      });
      
      // 如果清理后没有内容，添加一个空段落
      const finalContent = cleanedContent.length === 0 ? 
        [{ type: 'paragraph', children: [{ text: '' }] }] : 
        cleanedContent;
      
      // 更新内容（不包含标签文本）
      currentContentRef.current = finalContent as Descendant[];
      if (node.isFlipped) {
        updateNode(node.id, { backContent: finalContent as Descendant[] });
      } else {
        updateNode(node.id, { frontContent: finalContent as Descendant[], content: finalContent as Descendant[] });
      }
      
      return; // 早期返回，避免重复更新
    }
    
    // 正常的内容更新
    if (node.isFlipped) {
      updateNode(node.id, { backContent: value });
    } else {
                      // 取消固定
                      const currentScreenX = node.pinnedX || 100;
                      const currentScreenY = node.pinnedY || 100;
                      const worldX = (currentScreenX - panX) / scale;
                      const worldY = (currentScreenY - panY) / scale;
                      updateNode(node.id, { 
                        x: worldX, 
                        y: worldY,
                        pinned: false, // 直接设置pinned状态
                        pinnedX: undefined, // 清除固定坐标
                        pinnedY: undefined
                      });
                    }
                    setShowActionMenu(false);
                  }}
                  style={{
                    position: 'absolute',
                    top: -32, // 与主按钮同一水平线
                    right: 68, // 向左偏移更多
                    width: 28,
                    height: 28,
                    borderRadius: 14,
                    border: `2px solid #ffffff`,
                    background: '#ffffff', // 白色背景
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: `0 3px 12px rgba(0,0,0,0.15)`, // 增强阴影
                    transition: 'all 0.3s ease',
                    animation: 'slideIn 0.2s ease-out 0.05s both',
                    zIndex: 998, // 高z-index
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'scale(1.1)';
                    e.currentTarget.style.boxShadow = '0 4px 16px rgba(0,0,0,0.2)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)';
                    e.currentTarget.style.boxShadow = '0 3px 12px rgba(0,0,0,0.15)';
                  }}
                  title={node.pinned ? "取消固定" : "固定位置"}
                >
                  {/* 📌图钉样式图标 */}
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    style={{
                      color: '#dc2626',
                    }}
                  >
                    <path d="M16,12V4A1,1 0 0,0 15,3H9A1,1 0 0,0 8,4V12L6,14V16H11V21.5C11,21.78 11.22,22 11.5,22A0.5,0.5 0 0,0 12,21.5V16H17V14L16,12Z" />
                  </svg>
                </button>

                {/* 删除按钮 */}
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowDeleteModal(true);
                    setShowActionMenu(false);
                  }}
                  style={{
                    position: 'absolute',
                    top: -32, // 与主按钮同一水平线
                    right: 100, // 向左偏移最多
                    width: 28, // 稍微增大一点
                    height: 28,
                    borderRadius: 14,
                    border: `2px solid #ffffff`,
                    background: '#ef4444',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: `0 3px 12px rgba(239,68,68,0.3)`, // 红色阴影
                    transition: 'all 0.3s ease',
                    animation: 'slideIn 0.2s ease-out 0.1s both',
                    zIndex: 997, // 高z-index
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'scale(1.1)';
                    e.currentTarget.style.background = '#dc2626';
                    e.currentTarget.style.boxShadow = '0 4px 16px rgba(220,38,38,0.4)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)';
                    e.currentTarget.style.background = '#ef4444';
                    e.currentTarget.style.boxShadow = '0 3px 12px rgba(239,68,68,0.3)';
                  }}
                  title="删除卡片"
                >
                  {/* 垃圾桶SVG图标 - 更清晰的设计 */}
                  <svg
                    width="12"
                    height="12"
                    viewBox="0 0 16 16"
                    fill="none"
                  >
                    <path
                      d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"
                      fill="#ffffff"
                    />
                    <path
                      d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1-1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"
                      fill="#ffffff"
                    />
                  </svg>
                </button>

                {/* 添加翻转按钮 - 使用A/B符号设计 */}
                <button
                  onClick={handleFlipCard}
                  style={{
                    position: 'absolute',
                    top: -32,
                    right: 132, // 位置调整，现在连线按钮已被移除
                    width: 28,
                    height: 28,
                    borderRadius: 14,
                    border: `2px solid #ffffff`,
                    background: '#8b5cf6', // 紫色背景
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: `0 3px 12px rgba(139,92,246,0.3)`, // 紫色阴影
                    transition: 'all 0.3s ease',
                    animation: 'slideIn 0.2s ease-out 0.05s both',
                    zIndex: 999,
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'scale(1.1)';
                    e.currentTarget.style.boxShadow = '0 4px 16px rgba(139,92,246,0.4)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)';
                    e.currentTarget.style.boxShadow = '0 3px 12px rgba(139,92,246,0.3)';
                  }}
                  title="翻转卡片"
                >
                  {/* 使用A/B翻转图标 */}
                  <div style={{
                    position: 'relative',
                    width: 18,
                    height: 18,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}>
                    <span style={{
                      position: 'absolute',
                      fontSize: 10,
                      fontWeight: 'bold',
                      color: '#ffffff',
                      transform: 'translateX(-4px)',
                    }}>
                      A
                    </span>
                    <span style={{
                      position: 'absolute',
                      fontSize: 10,
                      fontWeight: 'bold',
                      color: '#ffffff',
                      transform: 'rotate(25deg)',
                    }}>
                      /
                    </span>
                    <span style={{
                      position: 'absolute',
                      fontSize: 10,
                      fontWeight: 'bold',
                      color: '#ffffff',
                      transform: 'translateX(4px)',
                    }}>
                      B
                    </span>
                  </div>
                </button>

                {/* AI代码生成器按钮 */}
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    const { scale: currentScale, panX, panY } = useBoardStore.getState();
                    setAIGeneratorPosition({ 
                      x: node.x * currentScale + panX + 100, 
                      y: node.y * currentScale + panY + 50 
                    });
                    setShowAIGenerator(true);
                    setShowActionMenu(false);
                  }}
                  style={{
                    position: 'absolute',
                    top: -32,
                    right: 164, // 在翻转按钮左侧
                    width: 28,
                    height: 28,
                    borderRadius: 14,
                    border: `2px solid #ffffff`,
                    background: '#10b981', // 绿色背景表示AI
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: `0 3px 12px rgba(16,185,129,0.3)`, // 绿色阴影
                    transition: 'all 0.3s ease',
                    animation: 'slideIn 0.2s ease-out 0.15s both',
                    zIndex: 996,
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'scale(1.1)';
                    e.currentTarget.style.boxShadow = '0 4px 16px rgba(16,185,129,0.4)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)';
                    e.currentTarget.style.boxShadow = '0 3px 12px rgba(16,185,129,0.3)';
                  }}
                  title="AI代码生成器"
                >
                  {/* AI机器人图标 */}
                  <div style={{
                    fontSize: 14,
                    fontWeight: 'bold',
                    color: '#ffffff',
                  }}>
                    🤖
                  </div>
                </button>
              </>
            )}
          </>
        )}
      </div>
      
      {/* 标签浮层 - 显示在卡片右下角外部 */}
      {node.tags && node.tags.length > 0 && !node.editing && (
        <div style={{
          position: 'absolute',
          bottom: -20,
          right: 0,
          display: 'flex',
          alignItems: 'center',
          flexWrap: 'wrap',
          gap: 4,
          padding: '2px 6px',
          background: 'rgba(0,0,0,0.8)',
          borderRadius: 4,
          fontSize: 10,
          color: '#fff',
          maxWidth: '200px',
          zIndex: 1000,
          pointerEvents: 'auto',
        }}>
          {node.tags.map((tag, index) => (
            <span
              key={tag}
              style={{
                display: 'inline-flex',
                alignItems: 'center',
                cursor: 'pointer',
                padding: '1px 3px',
                borderRadius: 2,
                backgroundColor: 'rgba(255,255,255,0.2)',
                transition: 'all 0.2s ease',
                fontSize: 9,
              }}
              onClick={(e) => {
                e.stopPropagation();
                removeTag(tag);
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = 'rgba(239, 68, 68, 0.6)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'rgba(255,255,255,0.2)';
              }}
              title="点击删除标签"
            >
              {tag}
            </span>
          ))}
        </div>
      )}
      
      {/* 确认删除对话框 */}
      {showDeleteModal && (
        <DeleteConfirmModal
          isOpen={showDeleteModal}
          nodeCount={1}
          onCancel={() => setShowDeleteModal(false)}
          onConfirm={handleConfirmDelete}
        />
      )}
      
      {/* 颜色选择器弹出窗口 */}
      {showColorPicker && (
        <CardColorPicker
          position={colorPickerPosition}
          currentColor={isDarkMode ? node.darkBackgroundColor : node.lightBackgroundColor}
          frosted={!!node.frosted}
          onColorChange={handleColorChange}
          onFrostedChange={val => updateNode(node.id, { frosted: val })}
          onClose={() => setShowColorPicker(false)}
        />
      )}
      
      {/* AI代码生成器弹出窗口 */}
      {showAIGenerator && (
        <AICodeGenerator
          isOpen={showAIGenerator}
          position={aiGeneratorPosition}
          onClose={() => setShowAIGenerator(false)}
        />
      )}
    </>
  );
};

export default NodeCard;
